智慧食材辨識與食譜推薦系統 - 檔案說明

=== 主要目錄 ===
📁 frontend/          - Flutter 前端應用程式
📁 backend/           - Flask 後端 API 服務
📁 database/          - 資料庫設計檔案
📄 README.md          - 專案總體說明
📄 啟動指令.txt       - 如何啟動系統的步驟
📄 檔案說明.txt       - 本檔案，說明每個檔案的作用

=== frontend/ 目錄 (Flutter 前端) ===
📄 pubspec.yaml       - Flutter 專案配置，定義依賴套件
📁 lib/               - 主要程式碼目錄
  📁 models/          - 資料模型定義
    📄 user.dart      - 用戶資料模型
  📁 screens/         - 應用程式頁面
    📄 login_screen.dart    - 登入頁面
    📄 register_screen.dart - 註冊頁面
    📄 home_screen.dart     - 首頁
    📄 profile_screen.dart  - 個人資料頁面
  📁 widgets/         - 自定義 UI 組件
    📄 custom_text_field.dart - 自定義輸入框
    📄 loading_button.dart    - 載入按鈕
  📁 providers/       - 狀態管理
    📄 auth_provider.dart    - 認證狀態管理
  📁 services/        - API 服務
    📄 api_service.dart      - 後端 API 呼叫
  📄 main.dart        - 應用程式入口點
📄 run.bat           - Windows 啟動腳本
📄 run.sh            - Linux/Mac 啟動腳本

=== backend/ 目錄 (Flask 後端) ===
📄 app.py            - 主應用程式，包含所有 API 端點
📄 config.py         - 應用程式配置設定
📄 run.py            - 啟動腳本
📄 requirements.txt  - Python 依賴套件清單

=== database/ 目錄 (資料庫) ===
📄 schema.sql        - 資料庫結構設計檔案

=== 各檔案詳細說明 ===

【前端檔案】
- main.dart: 應用程式主入口，設定路由和主題
- login_screen.dart: 用戶登入界面
- register_screen.dart: 用戶註冊界面
- home_screen.dart: 主頁面，顯示功能選單
- profile_screen.dart: 個人資料查看和編輯
- user.dart: 定義用戶資料結構
- auth_provider.dart: 管理登入狀態和用戶資料
- api_service.dart: 處理與後端的 API 通訊
- custom_text_field.dart: 統一的輸入框樣式
- loading_button.dart: 帶載入動畫的按鈕

【後端檔案】
- app.py: 包含所有 API 端點（登入、註冊、個人資料等）
- config.py: 資料庫連接、JWT 設定等配置
- run.py: 啟動 Flask 伺服器
- requirements.txt: 列出所有需要的 Python 套件

【資料庫檔案】
- schema.sql: 定義資料庫表格結構

【說明檔案】
- README.md: 專案總體介紹和快速開始指南
- 啟動指令.txt: 詳細的啟動步驟說明
- 檔案說明.txt: 本檔案，說明每個檔案的作用

=== 系統流程 ===
1. 用戶在前端輸入帳號密碼
2. 前端透過 api_service.dart 呼叫後端 API
3. 後端 app.py 驗證用戶資料
4. 後端查詢 database/ 中的資料庫
5. 返回結果給前端顯示